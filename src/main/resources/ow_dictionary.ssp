<% escapeMarkup = false %>
<%
import java.io.File
import java.nio.file.Paths
import scala.collection.mutable.ListBuffer
import ru.neoflex.datalog.domain.{Table, Topology}
import org.json4s.jackson.Serialization
import org.json4s._

implicit val formats = DefaultFormats

def getListOfFiles(dir: String):List[File] = {
    val d = new File(dir)
    if (d.exists && d.isDirectory) {
        d.listFiles.filter(_.isFile).toList
    } else {
        List[File]()
    }
}

def parseSqoopOwDir(path: String): Topology = {
    var values: Map[String, (String, String)] = Map()
    getListOfFiles(path).filter(p => p.getName.startsWith("hive_") || p.getName.startsWith("sqoop_"))
        .foreach(f => {
            val filesKey = f.getName.split('.')(0)
                .replace("hive_", "").replace("sqoop_", "")
            if(!values.keySet.exists(v => v == filesKey)) {
                values += (filesKey -> ("", ""))
            }
            f.getName() match {
                case fileName if fileName.startsWith("hive") => {
                    val source = scala.io.Source.fromFile(f.getPath())
                    try {
                        val hiveTableName =  source.getLines()
                            .find(s => s.startsWith("INSERT OVERWRITE TABLE ${DATABASE}."))
                            .get.replace("INSERT OVERWRITE TABLE ${DATABASE}.", "")
                        val mapping = values.get(filesKey)
                        values += (filesKey -> (mapping.get._1, hiveTableName.toLowerCase))
                    } finally
                        source.close()
                }
                case fileName if fileName.startsWith("sqoop") => {
                    val source = scala.io.Source.fromFile(f.getPath())
                    try {
                        val lines = source.getLines()
                        val words = lines.find(s => s.trim.startsWith("sqoop import")).get.split(' ')
                        var whereIndex = words.indexWhere(s => s.toUpperCase() == "WHERE")
                        var tableIndex = -1
                        if(whereIndex == -1) {
                            whereIndex = words.indexWhere(s => s.toUpperCase() == "--TABLE")
                            tableIndex = whereIndex + 1
                        } else {
                            tableIndex = whereIndex - 2
                        }
                        val sqoopSourceTable = words(tableIndex)
                        val mapping = values.get(filesKey)
                        values += (filesKey -> (sqoopSourceTable.toLowerCase, mapping.get._2))
                    }
                    finally
                        source.close()
                }
                case _ => println("unknown string")
            }
        })

    val datasets = new ListBuffer[Table]
    values.foreach(v => {
        val table = v._2._2
        val inTable = v._2._1
        var project = "Oliver_Wyman_Dictionary"
        var inproject = "Oliver_Wyman_Dictionary"
        if(table.toLowerCase().contains("processing") || table.toLowerCase().contains("request") || table.toLowerCase().contains("errors")) {
            project = "Oliver_Wyman"
            inproject = "Oliver_Wyman"
        }

        datasets += Table(name = table, layer = "Hive", project = project, in = List(Table(name = inTable, layer = "Oracle", project = inproject)))
    })
    Topology(datasets = datasets.toList)
}

val t = parseSqoopOwDir("C:/projects/temp/alfabank/Oliver_Wyman/hdfs_home/scripts/Oliver_Wyman")
val s = Serialization.write(t)
%>
${s}
<%
	import java.io.File
	import scala.collection.mutable.ListBuffer
	import scala.io.Source.fromFile
	import scala.io.Codec
	import scala.util.control.Breaks._
	import scala.io.Source
	import org.json4s._
	import org.json4s.jackson.JsonMethods._
	import ru.neoflex.datalog.engine.Parser
	%>
<%@ val params: Option[String] = None%>
<%	implicit val formats = DefaultFormats

	implicit val codec = Codec("UTF-8")

	case class DestTable(name: String, sources: List[String], sourceFile: String)

	def getListOfFiles(dir: String):List[File] = {
		val d = new File(dir)
		if (d.exists && d.isDirectory) {
			d.listFiles.filter(_.isFile).toList
		} else {
			List[File]()
		}
	}
	var joinScriptsFolder = ""
	val tables = ListBuffer[DestTable]()
	var project = ""
	var sourceFile = ""
	params.map(s => {
		val j = parse(s)
		joinScriptsFolder = (j \ "folder").extract[String]
		project = (j \ "project").extract[String]
		sourceFile = (j \ "sourcePrefix").extract[String]
	})
	val files = getListOfFiles(joinScriptsFolder)
	import scala.compat.Platform.EOL
	files.foreach(file => {
		val fn = sourceFile + file.getName()
		val source = fromFile(file.getAbsolutePath())

		val sqlScript = source.getLines.map(
			s => {
				var sout = s
				if(s.indexOf("--") > -1) {
					if(s.indexOf(';') > s.indexOf("--")) {
						sout = s.replace(";", "")
					}
				}
				sout.replace("DATE'", "'").replace("DATE '", "'")
			}
		) mkString "\n"
		sqlScript.split(';').filter(_.trim.nonEmpty).foreach(sql => {
			try {
				val outTables = Parser.getOutTables(sql)
				var inTables = Parser.getInTables(sql)
				outTables.foreach(destTable => {
					if(destTable.contains(".")) {
						tables.find(f => f.name == destTable).map(ft => {
							inTables = inTables ++ ft.sources;
							tables -= ft
						})
						tables += DestTable(destTable, inTables.toList.filter(t => t.contains(".")).distinct, fn)
					}
				})
			} finally {
				source.close()
			}
		})

	})
%>
{
"datasets":
	[
	#for (i <- 0 to tables.size - 1)
		{
			"name": "${tables(i).name}",
			"layer": "${tables(i).name.split('.')(0)}",
			"project": "${project}",
			"sourceFile": "${tables(i).sourceFile}",
			"in": [
			#for(j <- 0 to tables(i).sources.size - 1)
				{
					"name": "${tables(i).sources(j)}",
					"layer": "${tables(i).sources(j).split('.')(0)}",
					"project": "${project}",
					"sourceFile": "${tables(i).sourceFile}",
					"in": []
				}#if(j != tables(i).sources.size - 1) , #end
			#end
			],
			"out": [
			]
			}#if(i != tables.size - 1) , #end
	#end
	]
}

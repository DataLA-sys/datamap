<% escapeMarkup = false %>
<%
	import java.io.File
	import scala.collection.mutable.ListBuffer
	import scala.io.Source.fromFile
	import scala.io.Codec
	import scala.util.control.Breaks._
	import scala.io.Source
	import org.json4s._
	import org.json4s.jackson.JsonMethods._
	import org.json4s.jackson.Serialization
	import ru.neoflex.datalog.engine.{Parser, LineProcessor, SqlScriptLineProcessor}
	import ru.neoflex.datalog.engine.dto.{DestTable, Field}
	%>
<%@ val params: Option[String] = None%>
<%	implicit val formats = DefaultFormats

	implicit val codec = Codec("UTF-8")

	var joinScriptsFolder = ""
	val tables = ListBuffer[DestTable]()
	var project = ""
	var sourceFile = ""
	var deep = 1
	var filesFilter = """.*\.*"""
	params.map(s => {
		val j = parse(s)
		joinScriptsFolder = (j \ "folder").extract[String]
		project = (j \ "project").extract[String]
		sourceFile = (j \ "sourcePrefix").extract[String]
		(j \ "deep").toOption.map(v=> deep = v.extract[Int])
		(j \ "filesFilter").toOption.map(v=> filesFilter = v.extract[String])
	})
	Parser.processSqlFolder(joinScriptsFolder, sourceFile, tables, Seq(
	("CALL", "--CALL"),
	("\\QDATE FORMAT 'MMYY'\\E", "STRING"),
	("\\QDATE FORMAT 'DD.MM.YYYY'\\E", "STRING"),
	("\\QTIMESTAMP(0)\\E", "TIMESTAMP"),
	("\\&", ""),
	("WITH DATA", "/*WITH DATA"),
	("(?<=INDEX.{0,100});", "*/;"),
	("QUALIFY", "/*QUALIFY"),
	("(?<=QUALIFY.{0,100}) = 1", " =  1*/"),
	("\\Q) = 1\\E", ")=  1*/"),
	("\\Q)=1\\E", ")=  1*/"),
	("\\Q)= 1\\E", ")=  1*/"),
	("\\Q) =1\\E", ")=  1*/"),
	("MULTISET", ""),
	("SET ", "--SET "),
	("(?<=CREATE TABLE .{0,100})AS", ""),
	("CREATE TABLE ", "INSERT INTO "),
	("REPLACE VIEW", "CREATE VIEW")
	), _.contains("."), layer = "Odpp", filesFilter = filesFilter, deep = deep)
%>
{
"datasets":
	[
	#for (i <- 0 to tables.size - 1)
		{
			"name": "${tables(i).name}",
			"layer": "${tables(i).name.split('.')(0)}",
			"project": "${project}",
			"sourceFile": "${tables(i).sourceFile}",
			"in": [
			#for(j <- 0 to tables(i).sources.size - 1)
				{
					"name": "${tables(i).sources(j)}",
					"layer": "${tables(i).sources(j).split('.')(0)}",
					"project": "${project}",
					"sourceFile": "${tables(i).sourceFile}",
					"in": []
				}#if(j != tables(i).sources.size - 1) , #end
			#end
			],
			"out": [
			],
			<%val fields = Serialization.write(tables(i).fields) %>
			"fields": ${fields}
			}#if(i != tables.size - 1) , #end
	#end
	]
}
